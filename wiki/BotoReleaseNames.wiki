#summary A plan for naming boto releases

== The Problem with the Original Release Naming Scheme ==

The original convention for naming boto releases was:

{{{<major_release_number>.<minor_release_number><bug_fix_level>}}}

which resulted in release names such as 0.8d which means we are still on the zero'th major release, minor release number 8 and patch-level or bug-fix level D (the fourth).  Naming conventions such as this one are not uncommon in the software world and it seemed like a good idea at the time for boto.

The problem with that convention is that it implies a very linear progression of software maturity.  The 1.0x release is more mature than the 0.9x release, etc.  That model doesn't really work that well for boto because boto actually consists of a number of libraries supporting different Amazon Web Services.  Some, such as the S3 module, are very mature while others, such as EC2 or Mechanical Turk are less mature.  As new services are rolled out and support is added in boto, those modules will be even less mature.  Trying to apply a single numeric value to denote maturity is problematic.


== The New Scheme ==

To avoid this dilemma, boto will now use a release naming scheme based on families of words that are relevant to the namesake of the library, the [http://en.wikipedia.org/wiki/Boto Amazon River Dolphin or boto].  A family of names will be generated based on some characteristic of the boto and those names will then be used, in alphabetical order, as the next set of release names for boto.  For example, the first characteristic that will be used to generate release names is the geographic distribution of the boto, i.e. the countries in which it can be found.  So, the first set of release names is:

  * Bolivia
  * Brazil
  * Columbia
  * Ecuador
  * Guyana
  * Peru
  * Venezuela

Each of these names would represent a major release of boto which incorporated some major new functionality.  Within each release, incremental releases could be made to fix bugs or to introduce some very minor new capability.  So, the general naming convention is:

{{{<release_name>_<patch-level>}}}

where patch level is an integer starting with zero.  So, the first release using the new naming scheme will be *Bolivia_0*, then *Bolivia_1*, etc.